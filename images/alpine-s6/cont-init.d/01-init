#!/command/with-contenv sh
set -e

fail () { echo "ERROR $*" >&2; exit 1; }
warning () { echo "WARN  $*" >&2; }
info () { echo "INFO  $*" >&2; }

is_enabled() {
    case "$1" in
        1|true|yes) return 0; ;;
        *) return 1; ;;
    esac
}

DEVICE_ID="${DEVICE_ID:-}"
C8Y_USER="${C8Y_USER:-}"
C8Y_PASSWORD="${C8Y_PASSWORD:-}"

if [ -z "$DEVICE_ID" ]; then
    if [ -n "$HOSTNAME" ]; then
        DEVICE_ID="$HOSTNAME"
    elif [ -n "$HOST" ]; then
        DEVICE_ID="$HOST"
    fi
fi

if is_enabled "$USE_PKI"; then
    case "$PKI_PROVIDER" in
        pki-cfssl)
            if ! command -V pki-cfssl >/dev/null 2>&1; then
                fail "Missing dependency: $PKI_PROVIDER"
            fi
            export DEVICE_ID
            info "Using PKI Provider: $PKI_PROVIDER"
            pki-cfssl new
            ;;
        *)
            fail "Unsupported PKI provider: got=$PKI_PROVIDER, expected=[cfssl-pki]"
            ;;
    esac

    tedge connect c8y ||:
    exit 0
fi

# Use self-signed certificates (dev only!)
existing_device_id=$(tedge config get device.id 2>/dev/null)
if [ "$DEVICE_ID" != "$existing_device_id" ]; then
    info "Creating device certificate: device_id=$DEVICE_ID"
    tedge cert remove >/dev/null 2>&1 ||:
    tedge cert create --device-id "$DEVICE_ID"
fi

if [ -n "$C8Y_USER" ] && [ -n "$C8Y_PASSWORD" ]; then
    URL=$(tedge config get c8y.url 2>/dev/null)
    info "Uploading certificate to Cumulocity using tedge to $URL with user $C8Y_USER"
    C8YPASS="$C8Y_PASSWORD" tedge cert upload c8y --user "$C8Y_USER"
    sleep 5
    info "Connecting to Cumulocity IoT"
    tedge connect c8y ||:
else
    warning "Skipping certificate upload as C8Y_USER and C8Y_PASSWORD are not set"
fi
